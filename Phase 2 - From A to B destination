#include <TinyGPSPlus.h>
#include <AFMotor.h> 
#include <QMC5883LCompass.h>

AF_DCMotor motor1(1, MOTOR12_64KHZ);                               // create motor #1, 64KHz pwm
AF_DCMotor motor2(2, MOTOR12_64KHZ);                               // create motor #2, 64KHz pwm
AF_DCMotor motor3(3, MOTOR12_64KHZ);                               // create motor #3, 64KHz pwm
AF_DCMotor motor4(4, MOTOR12_64KHZ);

int mtr_Spd = 100;
TinyGPSPlus gps;
QMC5883LCompass compass;

double LONDON_LAT = 35.218189, LONDON_LON = 33.303203;
double distanceKmToLondon;
double GPS_Course;

boolean flag = false;
void setup() {
  // put your setup code here, to run once:
  Serial.begin(115200);
  Serial2.begin(9600);
  compass.init();
  compass.setSmoothing(10,true);

  Serial.println(F("Latitude   Longitude  Alt "));
  Serial.println(F("-----------------------------"));
}

void loop() {
//  static const double LONDON_LAT = 32.216949, LONDON_LON = 33.299041;
  while(Serial2.available()>0)
    if(gps.encode(Serial2.read())){
      displayInfo();
      if(flag)
        break;
    }
      

 

}

void displayInfo(){
  
  int x, y, z;
  int a;
  // put your main code here, to run repeatedly:
//  compass.read();
//  x = compass.getX();
//  y = compass.getY();
//  z = compass.getZ();
//  a = compass.getAzimuth();
//  Serial.print("X: ");
//  Serial.print(x);
//  Serial.print(" Y: ");
//  Serial.print(y);
//  Serial.print(" Z: ");
//  Serial.print(z);
//  Serial.print(" ");
//  Serial.print("A: ");
//  Serial.print(a);
//  Serial.println();
//  float A_lat = gps.location.lat();
//  float A_lng = gps.location.lng();
//  Serial.print(A_lat);
//  Serial.print(" ");
//  Serial.print(A_lng);
//  Serial.print(" ");
//  Serial.print(LONDON_LAT);
//  Serial.print(" ");
//  Serial.print(LONDON_LON);
//  Serial.print(" ");
  printFloat(gps.location.lat(), gps.location.isValid(), 11, 6);
  printFloat(gps.location.lng(), gps.location.isValid(), 12, 6);
//  printFloat(gps.altitude.meters(), gps.altitude.isValid(), 7, 2);

distanceKmToLondon =
    TinyGPSPlus::distanceBetween(
      gps.location.lat(),
      gps.location.lng(),
      LONDON_LAT, 
      LONDON_LON);
  Serial.print(distanceKmToLondon);
  GPS_Course = TinyGPSPlus::courseTo(gps.location.lat(),gps.location.lng(),LONDON_LAT,LONDON_LON);

  Serial.print(" ");
  Serial.print(GPS_Course);
  Serial.print(" ");
  Serial.print(TinyGPSPlus::cardinal(GPS_Course));
Serial.println();
//while(true){
  if(distanceKmToLondon < 1.5 ){
    Stop_Car();
   // break;
   Serial.print(" Destination Reached ");
  }else
    Forward_Meter();
//}
//   Stop_Car();
  delay(1000);
}

static void printFloat(float val, bool valid, int len, int prec)
{
  if (!valid)
  {
    while (len-- > 1)
      Serial.print('*');
    Serial.print(' ');
  }
  else
  {
    Serial.print(val, prec);
    int vi = abs((int)val);
    int flen = prec + (val < 0.0 ? 2 : 1); // . and -
    flen += vi >= 1000 ? 4 : vi >= 100 ? 3 : vi >= 10 ? 2 : 1;
    for (int i=flen; i<len; ++i)
      Serial.print(' ');
  }
  smartDelay(0);
}
static void smartDelay(unsigned long ms)
{
  unsigned long start = millis();
  do 
  {
    while (Serial2.available())
      gps.encode(Serial2.read());
  } while (millis() - start < ms);
}

static void printInt(unsigned long val, bool valid, int len)
{
  char sz[32] = "*****************";
  if (valid)
    sprintf(sz, "%ld", val);
  sz[len] = 0;
  for (int i=strlen(sz); i<len; ++i)
    sz[i] = ' ';
  if (len > 0) 
    sz[len-1] = ' ';
  Serial.print(sz);
  smartDelay(0);
}
void Forward_Meter()
{
  motor1.setSpeed(mtr_Spd);                                                   
  motor2.setSpeed(mtr_Spd);     
  motor3.setSpeed(mtr_Spd);     
  motor4.setSpeed(mtr_Spd);     
  
  motor1.run(FORWARD);                                                        // go forward all wheels for specified time
  motor2.run(FORWARD);
  motor3.run(FORWARD);
  motor4.run(FORWARD);
  Serial.print(" Forward ");
  delay(500);
}
void Stop_Car()
{     
  
  motor1.run(RELEASE);                                                        // go forward all wheels for specified time
  motor2.run(RELEASE);
  motor3.run(RELEASE);
  motor4.run(RELEASE);
  flag = true;
  Serial.print(" Stop ");
}

//void goWaypoint()
//{   
// Serial1.println("Go to Waypoint");
////Serial.print("Home_Latarray ");
////Serial.print(Home_LATarray[ac],6);
////Serial.print(" ");
////Serial.println(Home_LONarray[ac],6);   
//
////Serial1.print("Distance to Home");   
////Serial1.print(Distance_To_Home);
//
////Serial1.print("ac= ");
////Serial1.print(ac);
//
// while (true)  
//  {                                                                // Start of Go_Home procedure 
// // bluetooth();                                                     // Run the Bluetooth procedure to see if there is any data being sent via BT
//  i//f (blueToothVal == 5){break;}                                   // If a 'Stop' Bluetooth command is received then break from the Loop
//  //getCompass();                                                    // Update Compass heading                                          
//  getGPS();                                                        // Tiny GPS function that retrieves GPS data - update GPS location// delay time changed from 100 to 10
//  
//  if (millis() > 5000 && gps.charsProcessed() < 10)                // If no Data from GPS within 5 seconds then send error
//    Serial1.println(F("No GPS data: check wiring"));     
// 
//  Distance_To_Home = TinyGPSPlus::distanceBetween(gps.location.lat(),gps.location.lng(),Home_LATarray[ac], Home_LONarray[ac]);  //Query Tiny GPS for Distance to Destination
//  GPS_Course = TinyGPSPlus::courseTo(gps.location.lat(),gps.location.lng(),Home_LATarray[ac],Home_LONarray[ac]);                               //Query Tiny GPS for Course to Destination   
//   
//   /*
//    if (Home_LATarray[ac] == 0) {
//      Serial1.print("End of Waypoints");
//      StopCar();      
//      break;
//      }      
//   */ 
//    if (Distance_To_Home == 0)                                   // If the Vehicle has reached it's Destination, then Stop
//        {
//        StopCar();                                               // Stop the robot after each waypoint is reached
//        Serial1.println("You have arrived!");                    // Print to Bluetooth device - "You have arrived"          
//        //ac++;                                                    // increment counter for next waypoint
//        break;                                                   // Break from Go_Home procedure and send control back to the Void Loop 
//                                                                 // go to next waypoint
//        
//        }   
//   
//   
////   if ( abs(GPS_Course - compass_heading) <= 15)                  // If GPS Course and the Compass Heading are within x degrees of each other then go Forward                                                                  
////                                                                  // otherwise find the shortest turn radius and turn left or right  
////       {
////         Forward();                                               // Go Forward
////       } else 
////         {                                                       
////            int x = (GPS_Course - 360);                           // x = the GPS desired heading - 360
////            int y = (compass_heading - (x));                      // y = the Compass heading - x
////            int z = (y - 360);                                    // z = y - 360
////            
////            if ((z <= 180) && (z >= 0))                           // if z is less than 180 and not a negative value then turn left otherwise turn right
////                  { SlowLeftTurn();  }
////             else { SlowRightTurn(); }               
////        } 
//    
//
//  }                                                              // End of While Loop
//
//  
//}                                                                // End of Go_Home procedure
